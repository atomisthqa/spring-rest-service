/*
	Published editor that will be a generator entry point.
	Corresponds to old spring-rest-service template.
	Dependent on known package and class naming of the start point project.
	Parameters from the editors used will propagate to
	entry point, except for old_class and old_package, which are overridden.
*/
@tag "java"
@tag "spring"
@tag "spring-boot"
@tag "spring-rest"
@description "Creates a new Spring Boot Rest Microservice project"
@generator "Spring Boot Rest Microservice"
editor NewSpringBootRestMicroserviceProject

uses atomist.common-editors.UpdateReadme
uses atomist.common-editors.PomParameterizer
uses atomist.common-editors.PackageMove
uses atomist.common-editors.ClassRenamer

@maxLength 21
@description "Name of your new project."
@displayName "Project Name"
param project_name: @project_name

@default "myartifact"
@optional
@maxLength 21
@description "The Maven Artifact ID."
@displayName "A valid Maven Artifact ID, often used to specify the output of your project"
param artifact_id: @artifact_id

@default "mygroup"
@description "Group id: Used by Maven"
@optional
@displayName "Group ID"
@validInput "A valid Maven Group ID, often used to indicate your company, group or open source project"
param group_id: @group_id

@default "0.0.1-SNAPSHOT"
@displayName "Semantic Version"
@optional
@description "A Semantic Version number of the form: MAJOR.MINOR.PATCH"
@validInput "MAJOR.MINOR.PATCH"
param version: @semantic_version

@default ""
@optional
@description "Description of the new project"
@displayName "description"
@validInput "Free Text"
param description: .*

@default "com.myorg"
@displayName "Root Package"
@optional
@description "Root package for your generated source"
@validInput "A valid Java package name, i.e. com.myorg"
param root_package: @java_package

@default "MyService"
@optional
@description "New name for the initial service class"
@displayName "Class Name"
@validInput "Java Class names may contain alphanumeric characters, $ and _, i.e. MyService"
param service_class_name: @java_class

# Pattern to replace in old class name.
let old_class = "SpringRest"

# Root package of the old file
let old_package = "com.atomist.springrest"

SwitchReadmes
PomParameterizer name = project_name
PackageMove new_package = root_package
ClassRenamer new_class = service_class_name
AddCreationDateToReadme
AddLogback


@description "Switches READMEs replacing markers with a set of parameters"
editor SwitchReadmes

@description "Name of the new project"
@displayName "Name"
param project_name: @project_name

@default ""
@optional
@description "Description of the new project"
@displayName "description"
@validInput "Free Text"
param description: .*

let template = "readme.vm"

with project p
	do merge template to "README.md"

@description "Adds a creation date to the README.md"
editor AddCreationDateToReadme

with file f when path = "README.md"
  do replace "{{creation_date}}" { new Date().toISOString().split('T')[0] }


@description "Switches READMEs replacing markers with a set of parameters"
editor AddLogback

@displayName "Root Package"
@description "Root package for your generated source"
@validInput "Java class names may contain alphanumeric characters, $ and _"
param root_package: @java_package

let template = "logback.vm"

with project p
	do merge template to "src/main/resources/logback.xml"
