/*
	Published editor that will be a generator entry point.
	Corresponds to old spring-rest-service template.
	Dependent on known package and class naming of the start point project.
	Parameters from the editors used will propagate to
	entry point, except for old_class and old_package, which are overridden.
*/
@tag "java"
@tag "spring"
@tag "spring-boot"
@tag "spring-rest"
@description "Creates a new Spring Boot Rest Microservice project"
@generator "Spring Boot Rest Microservice"
editor NewSpringBootRestMicroserviceProject

uses common-editors.UpdateReadme
uses common-editors.PomParameterizer
uses common-editors.PackageMove
uses common-editors.ClassRenamer
uses common-editors.MarkOriginalGitHistoryForDeletionFromGeneratedProject

@maxLength 21
@description "Name of the new project."
param name: @project_name

@description "Description of the new project"
param description: .*

# @description "Artifact Id: Used by Maven"
# @defaultRef "name"
# @optional
# param artifact_id: @artifact_id

@description "Group id: Used by Maven"
param group_id: @group_id

@default "0.0.1-SNAPSHOT"
@optional
@description "Version of your project. Used in Maven POM"
param version: @semantic_version

@default "com.myorg"
@optional
@description "Root package for your generated source"
param new_package: @java_package

@description "New name for the class"
@validInput "Java class names may contain alphanumeric characters, $ and _"
param new_class: @java_class

# Pattern to replace in old class name.
let old_class = "SpringRest"

# Root package of the old file
let old_package = "com.atomist.springrest"

# Now we invoke generic editors that do the actual work
UpdateReadme
PomParameterizer artifact_id = name
PackageMove
ClassRenamer
MarkOriginalGitHistoryForDeletionFromGeneratedProject
